{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","timer","state","currentMinutes","currentSeconds","countdownMinutes","countdownSeconds","timerActive","timeCompleted","startTimer","bind","countDown","updateMinutes","updateSeconds","this","minutes","seconds","setState","setInterval","clearInterval","event","target","value","style","textAlign","body","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qOAsFeA,G,8BA9Eb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,EACb,EAAKC,MAAQ,CACXC,eAAgB,EAChBC,eAAgB,EAChBC,iBAAkB,EAClBC,iBAAkB,EAClBC,aAAa,EACbC,eAAe,GAEjB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBAdL,E,0EAiBhB,GAAiB,GAAdI,KAAKb,OAAwC,GAA1Ba,KAAKZ,MAAMK,cAAyBO,KAAKZ,MAAMG,iBAAmB,GAAKS,KAAKZ,MAAMI,iBAAmB,GAAI,CAC7H,IAAKS,EAAUD,KAAKZ,MAAMG,iBACtBW,EAAUF,KAAKZ,MAAMI,iBACzBQ,KAAKG,SAAS,CAACV,aAAa,EAAMJ,eAAgBY,EAAUX,eAAgBY,EAASR,eAAe,IACpGM,KAAKb,MAAQiB,YAAYJ,KAAKH,UAAY,Q,kCAK5C,IAAIK,EAAUF,KAAKZ,MAAME,eAAiB,EACtCW,EAAUD,KAAKZ,MAAMC,eACrBa,EAAU,IACZA,EAAU,GACVD,GAAmB,GAErBD,KAAKG,SAAS,CAACb,eAAgBY,EAAUb,eAAgBY,IACtDC,GAAW,GAAKD,GAAW,IAC5BI,cAAcL,KAAKb,OACnBa,KAAKG,SAAS,CAACV,aAAa,EAAOC,eAAe,IAClDM,KAAKb,MAAQ,K,oCAGHmB,GACZN,KAAKG,SAAS,CAACZ,iBAAkBe,EAAMC,OAAOC,U,oCAElCF,GACZN,KAAKG,SAAS,CAACX,iBAAkBc,EAAMC,OAAOC,U,+BAG9C,IAAId,EAAgB,GAChBM,KAAKZ,MAAMM,gBACbA,EAAgB,yBAAKe,MAAS,CAACC,UAAW,WAC1B,8CACA,kDAGlB,IAAIC,EAAO,yBAAKF,MAAS,CAACC,UAAW,WAC1B,4BAAKV,KAAKZ,MAAMC,eAAhB,kBAA+CW,KAAKZ,MAAME,eAA1D,oBACA,6CAAmBU,KAAKZ,MAAMG,iBAA9B,gBAA6DS,KAAKZ,MAAMI,iBAAxE,eAYX,OAVMQ,KAAKZ,MAAMK,cACbkB,EAAO,yBAAKF,MAAS,CAACC,UAAW,WAC3B,2BAAOE,KAAO,SAASC,SAAYb,KAAKF,cAAeU,MAASR,KAAKZ,MAAMG,mBAD1E,gBAED,6BACA,2BAAOqB,KAAO,SAASC,SAAYb,KAAKD,cAAeS,MAASR,KAAKZ,MAAMI,mBAH1E,gBAID,6BACA,6BACA,4BAAQsB,QAAWd,KAAKL,YAAxB,iBAIR,6BACE,6BAECD,EACAiB,O,GA1EUI,cCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.6015164c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { tsConstructorType } from '@babel/types';\n\n\nclass  App extends Component {\n\n  constructor(props){\n    super(props);\n    this.timer = 0;\n    this.state = {\n      currentMinutes: 0,\n      currentSeconds: 0,\n      countdownMinutes: 0,\n      countdownSeconds: 0,\n      timerActive: false,\n      timeCompleted: false\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.updateMinutes = this.updateMinutes.bind(this);\n    this.updateSeconds = this.updateSeconds.bind(this);\n  } \n  startTimer(){\n    if(this.timer == 0 && this.state.timerActive == false && (this.state.countdownMinutes > 0 || this.state.countdownSeconds > 0) ){\n      let  minutes = this.state.countdownMinutes;\n      let seconds = this.state.countdownSeconds;\n      this.setState({timerActive: true, currentMinutes: minutes , currentSeconds: seconds, timeCompleted: false});\n      this.timer = setInterval(this.countDown , 1000);\n    }\n  } \n\n  countDown(){\n    var seconds = this.state.currentSeconds - 1;\n    var minutes = this.state.currentMinutes;\n    if (seconds < 0){\n      seconds = 59;\n      minutes = minutes -1;\n    }\n    this.setState({currentSeconds: seconds , currentMinutes: minutes});\n    if(seconds <= 0 && minutes <= 0){\n      clearInterval(this.timer);\n      this.setState({timerActive: false, timeCompleted: true});\n      this.timer = 0;\n    }\n  }\n  updateMinutes(event){\n    this.setState({countdownMinutes: event.target.value});\n  }\n  updateSeconds(event){\n    this.setState({countdownSeconds: event.target.value});\n  }\n  render(){\n    var timeCompleted = \"\";\n    if (this.state.timeCompleted){\n      timeCompleted = <div style = {{textAlign: \"center\"}}>\n                      <h1>Time complete!</h1>\n                      <h3> Create another?</h3>\n                      </div>;\n    }\n    var body = <div style = {{textAlign: \"center\"}}>\n               <h1>{this.state.currentMinutes} Minute(s) and {this.state.currentSeconds} Second(s) left!</h1>\n               <h2>CountDown for {this.state.countdownMinutes} minutes and {this.state.countdownSeconds} seconds. </h2>\n              </div>;\n    if (! this.state.timerActive){\n        body = <div style = {{textAlign: \"center\"}}>\n              <input type = \"number\" onChange = {this.updateMinutes} value = {this.state.countdownMinutes}/> &nbsp; Minutes\n              <br/>\n              <input type = \"number\" onChange = {this.updateSeconds} value = {this.state.countdownSeconds}/> &nbsp; Seconds\n              <br/>\n              <br/>\n              <button onClick = {this.startTimer}> CountDown!</button>\n              </div>;\n    }\n    return(\n      <div>\n        <br>\n        </br>\n        {timeCompleted}\n        {body}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}